name: Deploy Dummy Docs and Generate ZIP

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install mike mkdocs git+https://github.com/analogdevicesinc/harmonic-mkdocs-theme.git mkdocs-print-site-plugin

      - name: Install Chromium
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser || sudo apt-get install -y chromium

      - name: Set Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Build each version and generate PDFs
        run: |
          declare -A releases=(
            ["1.0.0"]="release/1.0.0"
            ["1.0.2"]="release/1.0.2"
            ["1.1.0"]="release/1.1.0"
          )

          mkdir -p built_versions

          for version in "${!releases[@]}"; do
            branch="${releases[$version]}"
            echo "Building $version from $branch"

            git fetch origin "$branch"
            git checkout "$branch" || git checkout -b "$branch"
            git pull origin "$branch" || echo "No remote updates"

            echo "ENABLE_PDF_EXPORT=true" >> $GITHUB_ENV
            mkdocs build

            mkdir -p "built_versions/${version}/assets"
            cp -r site/* "built_versions/${version}/"
            chromium-browser --headless --disable-gpu \
              --print-to-pdf="built_versions/${version}/assets/codefusion-studio.pdf" \
              --no-margins \
              file://$PWD/site/print/index.html
          done

      - name: Deploy all versions to mike
        run: |
          declare -A releases=(
            ["1.0.0"]="release/1.0.0"
            ["1.0.2"]="release/1.0.2"
            ["1.1.0"]="release/1.1.0"
          )

          for version in "${!releases[@]}"; do
            branch="${releases[$version]}"
            git checkout "$branch"

            if [[ "$version" == "1.1.0" ]]; then
              mike deploy "$version" latest --update-aliases --ignore-remote-status
              mike set-default latest --ignore-remote-status
            else
              mike deploy "$version" --ignore-remote-status
            fi
          done

      - name: Archive all built docs and PDFs
        run: |
          cd built_versions
          zip -r ../dummy-docs.zip .

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: dummy-docs-zip
          path: dummy-docs.zip
