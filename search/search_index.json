{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome","text":"<p>I'm Caroline Maguire \u2014 a technical writer and product specialist focused on developer tools, embedded systems, and clear, user-focused documentation.</p> <p>This site showcases a mix of:</p> <ul> <li>\ud83d\udcbc Writing samples and CV material</li> <li>\ud83e\udde0 Academic projects from my MSc in AI</li> <li>\ud83d\udee0\ufe0f Technical projects with real code, documentation, and deployment guides</li> </ul>"},{"location":"cv/","title":"CV and writing samples","text":"<p>This section contains writing samples and project work relevant to technical writing and documentation.</p> <ul> <li> <p>Academic projects: Research undertaken as part of my postgraduate studies.</p> </li> <li> <p>Writing samples: Examples of product documentation I\u2019ve authored or maintained.</p> </li> </ul>"},{"location":"cv/academic-projects/academic-projects/","title":"\ud83c\udf93 Academic Work","text":"<p>Below are selected academic projects submitted as part of my postgraduate studies:</p> <ul> <li> <p>Extracting, Storing, and Manipulating API Data Higher Diploma in Computer Science, 2018\u20132019 \u2013 Institute of Technology, Sligo   Developed a Python-based solution to retrieve and process data from public APIs. The project focused on data cleaning, transformation, and structured storage using SQL for downstream analysis.</p> </li> <li> <p>Classifying Mental Health Issues Using BERT MSc in Software Design with Artificial Intelligence, 2023\u20132024 \u2013 Technological University of the Shannon, Athlone Campus   Applied transformer-based NLP models (BERT) to classify text data related to mental health. The project involved dataset preparation, fine-tuning pretrained models, and evaluating classification performance on anonymized user-generated content.</p> </li> </ul>"},{"location":"cv/writing-samples/writing-samples/","title":"Writing Samples","text":"<p>These are selected examples of product documentation and user help content I've contributed to or maintained:</p> <ul> <li> <p>Johnson Controls \u2013 SCT Help, Installation Instructions, Release Note (Catalog Page) System Configuration Tool Help</p> </li> <li> <p>Oomnitza \u2013 User Documentation Oomnitza User Guide</p> </li> <li> <p>Oomnitza \u2013 API GitHub Repo Oomnitza Connector GitHub Repository</p> </li> <li> <p>Analog Devices \u2013 CodeFusion Studio User Guide CodeFusion Studio Documentation</p> </li> </ul>"},{"location":"projects/","title":"Project focused work","text":"<p>This section includes hands-on technical projects, including:</p> <ul> <li> <p>MA project: Machine learning notebooks completed during my MSc in Software Design with Artificial Intelligence.</p> </li> <li> <p>Fast DSP microservice: A how-to guide for building and deploying a FastAPI microservice to AWS EC2.</p> </li> </ul>"},{"location":"projects/ai-masters-project/","title":"AI Masters Project","text":"<p>The following notebooks were completed as part of my MSc in Software Design with Artificial Intelligence. They explore data analysis and machine learning using real-world datasets.</p> <ul> <li> <p><code>diabetes_prediction_decision_tree.ipynb</code>: Uses a decision tree classifier to predict diabetes outcomes based on clinical features.</p> </li> <li> <p><code>mental_health_prediction-dataset.ipynb</code>: Applies a BERT transformer model to detect mental health issues in social media posts.</p> </li> </ul>"},{"location":"projects/fast-dsp-microservice/deployment-guide/","title":"Deploy a FastAPI microservice to AWS EC2 using Uvicorn","text":"<p>This guide shows you how to deploy a FastAPI microservice to AWS EC2. The service fetches data from a third-party API, processes the response, and exposes it through a RESTful endpoint. While the API used in this example uses a free tidal data API, the same pattern can be applied to any data-driven API.</p>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#deploy-the-fastapi-microservice-locally","title":"Deploy the FastAPI microservice locally","text":"<p>Before deploying to EC2, test your app locally to make sure everything runs as expected.</p>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed:</p> <ul> <li>Python 3.10 or later</li> <li><code>pip</code></li> <li>A free API key from WorldTides</li> </ul>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-1-clone-the-github-project","title":"Step 1: Clone the GitHub project","text":"<p>Clone the GitHub project containing the Python, environment, and requirements files:</p> <pre><code>git clone git@github.com:carolinemaymaguirecmm/about.git\ncd about/docs/projects/fast-dsp-microservice\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-2-set-up-and-activate-a-virtual-environment","title":"Step 2: Set up and activate a virtual environment","text":"<pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-3-install-dependencies","title":"Step 3: Install dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-4-add-your-api-key","title":"Step 4: Add your API Key","text":"<p>Open the <code>.env</code> file and replace the placeholder with your WorldTides API key:</p> <pre><code>TIDE_API_KEY=your_api_key_here\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-5-start-the-api-server","title":"Step 5: Start the API server","text":"<p>Run the FastAPI app using Uvicorn:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>You should see output similar to the following:</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-6-view-the-endpoint-in-your-browser","title":"Step 6: View the endpoint in your browser","text":"<p>When you visit http://localhost:8000/tides, you'll receive the following JSON response:</p> <pre><code>{\n  \"tide_data\": [\n    {\n      \"station\": \"Youghal\",\n      \"location\": \"51.9500, -7.8500\",\n      \"tides\": [\n        {\n          \"time\": \"01:13\",\n          \"type\": \"Low\",\n          \"height\": -1.72\n        },\n        {\n          \"time\": \"06:58\",\n          \"type\": \"High\",\n          \"height\": 1.67\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>Note This endpoint returns tide data for three nearby stations. The number of stations is limited to avoid exceeding free-tier API limits. You can change the base location, the radius, or the station limit by modifying <code>main.py</code>.</p>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#explore-fastapi-documentation-features","title":"Explore FastAPI documentation features","text":"<p>FastAPI includes automatically generated interactive API documentation. You can explore and test your API using the following interfaces:</p> <ul> <li>Swagger UI: http://localhost:8000/docs</li> <li>ReDoc: http://localhost:8000/redoc</li> </ul> <p></p>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#deploy-a-fastapi-microservice-to-aws-ec2","title":"Deploy a FastAPI microservice to AWS EC2","text":"<p>Follow these steps to deploy the microservice to the cloud using Amazon EC2.</p>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-1-launch-an-ec2-instance","title":"Step 1: Launch an EC2 instance","text":"<ol> <li>Go to the AWS Management Console.</li> <li> <p>Launch a new EC2 instance with the following configuration:</p> <ul> <li>AMI: Ubuntu Server 22.04 LTS</li> <li>Instance type: <code>t2.micro</code></li> <li>Key pair: Create a new key pair and download the <code>.pem</code> file.</li> </ul> </li> <li> <p>Click Launch instance.</p> </li> <li>After launch, navigate to EC2 &gt; Instances, select your instance, and copy the Public IPv4 address.</li> </ol>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-2-configure-the-security-group","title":"Step 2: Configure the security group","text":"<p>AWS EC2 blocks all incoming traffic to your EC2 instance. To access your FastAPI app from a browser, you must allow traffic on the port Uvicorn uses. By default, this value is <code>8000</code>.</p> <ol> <li>In the EC2 Console, open your instance and scroll to the Security section.</li> <li>Click the security group name.</li> <li>Select the Inbound rules tab and click Edit inbound rules.</li> <li>Click Add rule, then enter the following values:<ul> <li>Type: Custom TCP</li> <li>Port range: <code>8000</code></li> <li>Source: <code>&lt;your-ip-address&gt;</code> or <code>0.0.0.0/0</code></li> </ul> </li> <li>Click Save rules.</li> </ol> <p></p> <p>Important For security, restrict access by using your IP as the source instead of <code>0.0.0.0/0</code>. Only use <code>0.0.0.0/0</code> to allow public access during short testing periods.</p>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-3-ssh-into-the-instance","title":"Step 3: SSH into the instance","text":"<p>Use SSH to connect to your EC2 instance. Replace <code>&lt;your-key-name&gt;</code> with your <code>.pem</code> file name and <code>&lt;your-ec2-public-ip&gt;</code> with the instance\u2019s public IPv4 address:</p> <pre><code>ssh -i &lt;your-key-name&gt;.pem ubuntu@&lt;your-ec2-public-ip&gt;\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-4-set-up-the-environment-on-ec2","title":"Step 4: Set up the environment on EC2","text":"<p>Update the package index and install Python and Git:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install -y python3 python3-pip python3-venv git\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-5-clone-the-github-project","title":"Step 5: Clone the GitHub project","text":"<p>Clone the GitHub repository containing the project files:</p> <pre><code>git clone https://github.com/carolinemaymaguirecmm/about.git\ncd about/docs/projects/fast-dsp-microservice\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-6-set-up-and-run","title":"Step 6: Set up and run","text":"<p>Create and activate a virtual environment, then install the required Python packages:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-7-add-your-api-key","title":"Step 7: Add your API key","text":"<p>Open the <code>.env</code> file and add your WorldTides API key:</p> <pre><code>nano .env\n</code></pre> <p>Then add the following line:</p> <pre><code>TIDE_API_KEY=your_api_key_here\n</code></pre>"},{"location":"projects/fast-dsp-microservice/deployment-guide/#step-8-start-fastapi-with-public-access","title":"Step 8: Start FastAPI with public access","text":"<p>Start the FastAPI server with the following command:</p> <pre><code>uvicorn main:app --host 0.0.0.0 --port 8000\n</code></pre> <p>Once the server is running, visit: <code>http://&lt;your-ec2-public-ip&gt;/tides</code></p> <p>You should see a JSON response with tide data from the nearest stations.</p> <p>Your FastAPI microservice is now live and accessible on AWS EC2. For additional tips on how to enhance your deployment, refer to the official FastAPI deployment guide.</p>"}]}